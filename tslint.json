{
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

@Service
public class OrderManager {

    private final RestTemplate restTemplate;
    private final AppConfig appConfig;
    private final Queue<Integer> orderQueue = new ConcurrentLinkedQueue<>();
    private final Lock queueLock = new ReentrantLock(); // Lock for queue management
    private final Lock allocationLock = new ReentrantLock(); // Lock for allocating order IDs

    public OrderManager(RestTemplate restTemplate, AppConfig appConfig) {
        this.restTemplate = restTemplate;
        this.appConfig = appConfig;
    }

    public Integer getNextParentId() {
        queueLock.lock();
        try {
            while (orderQueue.isEmpty()) {
                allocateOrderIds(10); // Request 10 more IDs
                try {
                    wait(); // Wait until IDs are available
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Thread interrupted while waiting for parent IDs", e);
                }
            }
            return orderQueue.poll();
        } finally {
            queueLock.unlock();
        }
    }

    private void allocateOrderIds(int batchSize) {
        allocationLock.lock(); // Locking allocation separately
        try {
            // Avoid redundant allocations if another thread already filled the queue
            if (!orderQueue.isEmpty()) {
                return;
            }

            Integer startingId = getABParentId(batchSize);
            if (startingId == null) {
                throw new RuntimeException("Failed to allocate parent IDs");
            }

            for (int i = 0; i < batchSize; i++) {
                orderQueue.add(startingId + i);
            }

            synchronized (this) {
                notifyAll(); // Notify waiting threads that IDs are available
            }
        } finally {
            allocationLock.unlock(); // Unlock allocation lock after allocation
        }
    }

    private Integer getABParentId(int batchSize) { 
        String url = "http://server-c/api/get-sequence?batchSize=" + batchSize;
        return restTemplate.getForObject(url, Integer.class);
    }
}

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

@Service
public class OrderManager {

    private final RestTemplate restTemplate;
    private final AppConfig appConfig;
    private final Queue<Integer> orderQueue = new ConcurrentLinkedQueue<>();
    private final Lock queueLock = new ReentrantLock(); // Lock for queue management
    private final Lock allocationLock = new ReentrantLock(); // Lock for allocating order IDs

    public OrderManager(RestTemplate restTemplate, AppConfig appConfig) {
        this.restTemplate = restTemplate;
        this.appConfig = appConfig;
    }

    public Integer getNextParentId() {
        queueLock.lock();
        try {
            while (orderQueue.isEmpty()) {
                allocateOrderIds(10); // Request 10 more IDs
                try {
                    wait(); // Wait until IDs are available
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Thread interrupted while waiting for parent IDs", e);
                }
            }
            return orderQueue.poll();
        } finally {
            queueLock.unlock();
        }
    }

    private void allocateOrderIds(int batchSize) {
        allocationLock.lock(); // Locking allocation separately
        try {
            // Avoid redundant allocations if another thread already filled the queue
            if (!orderQueue.isEmpty()) {
                return;
            }

            Integer startingId = getABParentId(batchSize);
            if (startingId == null) {
                throw new RuntimeException("Failed to allocate parent IDs");
            }

            for (int i = 0; i < batchSize; i++) {
                orderQueue.add(startingId + i);
            }

            synchronized (this) {
                notifyAll(); // Notify waiting threads that IDs are available
            }
        } finally {
            allocationLock.unlock(); // Unlock allocation lock after allocation
        }
    }

    private Integer getABParentId(int batchSize) { 
        String url = "http://server-c/api/get-sequence?batchSize=" + batchSize;
        return restTemplate.getForObject(url, Integer.class);
    }
}





  
  "rulesDirectory": [
    "node_modules/codelyzer"
  ],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [
      true,
      "check-space"
    ],
    "curly": true,
    "deprecation": {
      "severity": "warn"
    },
    "eofline": true,
    "forin": true,
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "import-spacing": true,
    "indent": [
      true,
      "spaces"
    ],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [
      true,
      140
    ],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-misused-new": true,
    "no-non-null-assertion": true,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    "prefer-const": true,
    "quotemark": [
      true,
      "single"
    ],
    "radix": true,
    "semicolon": [
      true,
      "always"
    ],
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "unified-signatures": true,
    "variable-name": false,
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "no-output-on-prefix": true,
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true
  }
}
